import 'package:equatable/equatable.dart';import 'package:flutter/material.dart';import '/core/app_export.dart';import '../models/productdesigner_item_model.dart';import '../models/worldwide_item_model.dart';import '../models/any_item_model.dart';import '../models/any2_item_model.dart';import 'package:basri_s_application5/presentation/job_preferences_two_screen/models/job_preferences_two_model.dart';part 'job_preferences_two_event.dart';part 'job_preferences_two_state.dart';/// A bloc that manages the state of a JobPreferencesTwo according to the event that is dispatched to it.
class JobPreferencesTwoBloc extends Bloc<JobPreferencesTwoEvent, JobPreferencesTwoState> {JobPreferencesTwoBloc(JobPreferencesTwoState initialState) : super(initialState) { on<JobPreferencesTwoInitialEvent>(_onInitialize); on<UpdateChipViewEvent>(_updateChipView); on<UpdateChipView1Event>(_updateChipView1); on<UpdateChipView2Event>(_updateChipView2); on<UpdateChipView3Event>(_updateChipView3); }

_onInitialize(JobPreferencesTwoInitialEvent event, Emitter<JobPreferencesTwoState> emit, ) async  { emit(state.copyWith(jobPreferencesTwoModelObj: state.jobPreferencesTwoModelObj?.copyWith(productdesignerItemList: fillProductdesignerItemList(), worldwideItemList: fillWorldwideItemList(), anyItemList: fillAnyItemList(), any2ItemList: fillAny2ItemList()))); } 
_updateChipView(UpdateChipViewEvent event, Emitter<JobPreferencesTwoState> emit, ) { List<ProductdesignerItemModel> newList = List<ProductdesignerItemModel>.from(state.jobPreferencesTwoModelObj!.productdesignerItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(jobPreferencesTwoModelObj: state.jobPreferencesTwoModelObj?.copyWith(productdesignerItemList: newList))); } 
_updateChipView1(UpdateChipView1Event event, Emitter<JobPreferencesTwoState> emit, ) { List<WorldwideItemModel> newList = List<WorldwideItemModel>.from(state.jobPreferencesTwoModelObj!.worldwideItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(jobPreferencesTwoModelObj: state.jobPreferencesTwoModelObj?.copyWith(worldwideItemList: newList))); } 
_updateChipView2(UpdateChipView2Event event, Emitter<JobPreferencesTwoState> emit, ) { List<AnyItemModel> newList = List<AnyItemModel>.from(state.jobPreferencesTwoModelObj!.anyItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(jobPreferencesTwoModelObj: state.jobPreferencesTwoModelObj?.copyWith(anyItemList: newList))); } 
_updateChipView3(UpdateChipView3Event event, Emitter<JobPreferencesTwoState> emit, ) { List<Any2ItemModel> newList = List<Any2ItemModel>.from(state.jobPreferencesTwoModelObj!.any2ItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(jobPreferencesTwoModelObj: state.jobPreferencesTwoModelObj?.copyWith(any2ItemList: newList))); } 
List<ProductdesignerItemModel> fillProductdesignerItemList() { return List.generate(6, (index) => ProductdesignerItemModel()); } 
List<WorldwideItemModel> fillWorldwideItemList() { return List.generate(6, (index) => WorldwideItemModel()); } 
List<AnyItemModel> fillAnyItemList() { return List.generate(3, (index) => AnyItemModel()); } 
List<Any2ItemModel> fillAny2ItemList() { return List.generate(3, (index) => Any2ItemModel()); } 
 }
